// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc839.ReboundRumble;

import org.usfirst.frc839.ReboundRumble.commands.ConveyorReverse;
import org.usfirst.frc839.ReboundRumble.commands.ConveyorForward;
import org.usfirst.frc839.ReboundRumble.commands.IntakeForward;
import org.usfirst.frc839.ReboundRumble.commands.ArmDown;
import org.usfirst.frc839.ReboundRumble.commands.HoodUp;
import org.usfirst.frc839.ReboundRumble.commands.ArmUp;
import org.usfirst.frc839.ReboundRumble.commands.AutonomousCommand;
import org.usfirst.frc839.ReboundRumble.commands.IntakeReverse;
import org.usfirst.frc839.ReboundRumble.commands.HoodDown;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc839.utility.UniversalJoystick;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI 
{
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    public UniversalJoystick         joystick1;
    public UniversalJoystick         joystick2;

    public JoystickButton   btnIntakeForward;
    public JoystickButton   btnIntakeReverse;
    public JoystickButton   btnConveyorForward;
    public JoystickButton   btnConveeyorReverse;
    public JoystickButton   btnShooterForward;
    public JoystickButton   btnShooterReverse;
    public JoystickButton   btnHoodUp;
    public JoystickButton   btnHoodDown;
    public JoystickButton   btnArmDown;
    public JoystickButton   btnArmUp;
    public JoystickButton   btnIntakeForward2;
    public JoystickButton   btnIntakeReverse2;
    public JoystickButton   btnConveyorForward2;
    public JoystickButton   btnConveyorReverse2;
    public JoystickButton   btnShooterForward2;
    public JoystickButton   btnShooterReverse2;
    public JoystickButton   btnHoodUp2;
    public JoystickButton   btnHoodDown2;
    public JoystickButton   btnArmDown2;
    public JoystickButton   btnArmUp2;

    public OI() 
    {
        joystick1 = new UniversalJoystick(1);
        joystick2 = new UniversalJoystick(2);

        // Connect Primary joystick

        btnArmUp            = joystick1.createButton( UniversalJoystick.kBtnX     );
        btnArmDown          = joystick1.createButton( UniversalJoystick.kBtnB     );
        btnConveeyorReverse = joystick1.createButton( UniversalJoystick.kBtnY     );
        btnConveyorForward  = joystick1.createButton( UniversalJoystick.kBtnA     );
        btnIntakeReverse    = joystick1.createButton( UniversalJoystick.kBtnLB    ); 
        btnHoodDown         = joystick1.createButton( UniversalJoystick.kBtnBack  );
        btnHoodUp           = joystick1.createButton( UniversalJoystick.kBtnStart );
        btnIntakeForward    = joystick1.createButton( UniversalJoystick.kBtnRB    ); 
      //btnShooterReverse   = joystick1.createButton( UniversalJoystick.kBtnA     );
      //btnShooterForward   = joystick1.createButton( UniversalJoystick.kBtnY     );
        
        btnArmUp            .whileHeld  ( new ArmUp          ());
        btnArmDown          .whileHeld  ( new ArmDown        ());
        btnHoodDown         .whenPressed( new HoodDown       ());
        btnHoodUp           .whenPressed( new HoodUp         ());
      //btnShooterReverse   .whileHeld  ( new ShooterReverse ());
      //btnShooterForward   .whileHeld  ( new ShooterForward ());
        btnConveeyorReverse .whileHeld  ( new ConveyorReverse());
        btnConveyorForward  .whileHeld  ( new ConveyorForward());
        btnIntakeReverse    .whileHeld  ( new IntakeReverse  ());
        btnIntakeForward    .whileHeld  ( new IntakeForward  ());
        
        // Connect Second joystick

        btnArmUp2            = joystick2.createButton( UniversalJoystick.kBtnX     );
        btnArmDown2          = joystick2.createButton( UniversalJoystick.kBtnB     );
        btnConveyorReverse2  = joystick2.createButton( UniversalJoystick.kBtnY     );
        btnConveyorForward2  = joystick2.createButton( UniversalJoystick.kBtnA     );
        btnIntakeReverse2    = joystick2.createButton( UniversalJoystick.kBtnLB    ); 
        btnHoodDown2         = joystick2.createButton( UniversalJoystick.kBtnBack  );
        btnHoodUp2           = joystick2.createButton( UniversalJoystick.kBtnStart );
        btnIntakeForward2    = joystick2.createButton( UniversalJoystick.kBtnRB    );
        
//      btnShooterReverse2   = joystick2.createButton( UniversalJoystick.kBtnA     );
//      btnShooterForward2   = joystick2.createButton( UniversalJoystick.kBtnY     );

        
        btnArmUp2           .whileHeld  ( new ArmUp          ());
        btnArmDown2         .whileHeld  ( new ArmDown        ());
        btnHoodDown2        .whenPressed( new HoodDown       ());
        btnHoodUp2          .whenPressed( new HoodUp         ());
      //btnShooterReverse2  .whileHeld  ( new ShooterReverse ());
      //btnShooterForward2  .whileHeld  ( new ShooterForward ());
        btnConveyorReverse2 .whileHeld  ( new ConveyorReverse());
        btnConveyorForward2 .whileHeld  ( new ConveyorForward());
        btnIntakeReverse2   .whileHeld  ( new IntakeReverse  ());
        btnIntakeForward2   .whileHeld  ( new IntakeForward  ());

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command" , new AutonomousCommand ());
        SmartDashboard.putData("IntakeForward"      , new IntakeForward     ());
        SmartDashboard.putData("IntakeReverse"      , new IntakeReverse     ());
        SmartDashboard.putData("ConveyorForward"    , new ConveyorForward   ());
        SmartDashboard.putData("ConveyorReverse"    , new ConveyorReverse   ());
      //SmartDashboard.putData("ShooterForward"     , new ShooterForward    ());
      //SmartDashboard.putData("ShooterReverse"     , new ShooterReverse    ());
        SmartDashboard.putData("HoodUp"             , new HoodUp            ());
        SmartDashboard.putData("HoodDown"           , new HoodDown          ());
        SmartDashboard.putData("ArmDown"            , new ArmDown           ());
        SmartDashboard.putData("ArmUp"              , new ArmUp             ());
        
    }
    
    public UniversalJoystick getJoystick1() 
    {
        return joystick1;
    }
    
    public UniversalJoystick getJoystick2() 
    {
        return joystick2;
    }
    
    public double getLeftSpeed()
    {
        return joystick1.leftAxisY();
    }
    
    public double getRightSpeed()
    {
        return joystick1.rightAxisY();
    }
}
